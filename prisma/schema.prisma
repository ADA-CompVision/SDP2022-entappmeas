generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  BUSINESS
  ADMIN
}

enum DiscountType {
  PERCENTAGE_TOTAL
  FIXED_TOTAL
}

model User {
  id        Int    @id @default(autoincrement())
  firstName String @db.VarChar(256)
  lastName  String @db.VarChar(256)
  address   String @db.Text
  phone     String @unique() @db.VarChar(16)
  email     String @unique() @db.VarChar(256)
  username  String @unique() @db.VarChar(256)
  password  String @db.VarChar(256)
  role      Role   @default(USER)
}

model Category {
  id         String      @id @default(cuid())
  name       String      @unique @db.VarChar(256)
  attributes Attribute[]
  products   Product[]
}

model Attribute {
  id                String             @id @default(cuid())
  name              String             @unique @db.VarChar(256)
  categories        Category[]
  productAttributes ProductAttribute[]
}

model Product {
  id                String             @id @default(cuid())
  name              String             @db.VarChar(256)
  description       String             @db.Text
  categoryId        String
  category          Category           @relation(fields: [categoryId], references: [id])
  prices            Price[]
  productAttributes ProductAttribute[]
  Cart              Cart[]
}

model ProductAttribute {
  id          String    @id @default(cuid())
  value       String    @db.Text
  productId   String
  attributeId String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  attribute   Attribute @relation(fields: [attributeId], references: [id])
}

model Currency {
  id      String  @id @default(cuid())
  symbol  String  @db.VarChar(256)
  acronym String  @db.VarChar(256)
  name    String  @db.VarChar(256)
  prices  Price[]
}

model Price {
  id         String    @id @default(cuid())
  productId  String
  currencyId String
  value      Float     @db.DoublePrecision
  startDate  DateTime  @default(now()) @db.Timestamp()
  endDate    DateTime? @db.Timestamp()
  currency   Currency  @relation(fields: [currencyId], references: [id])
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String  @id @default(cuid())
  userId    Int
  productId String
  count     Int     @default(1) @db.Integer
  product   Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Discount {
  id        String       @id @default(cuid())
  code      String       @unique @db.VarChar(256)
  type      DiscountType
  value     Float        @db.DoublePrecision
  limit     Int?         @db.Integer
  remaining Int?         @db.Integer
  startDate DateTime     @db.Timestamp()
  endDate   DateTime?    @db.Timestamp()
}
